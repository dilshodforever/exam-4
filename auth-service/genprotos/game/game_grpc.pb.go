// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: game.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	GetLevels(ctx context.Context, in *GetLevelsRequest, opts ...grpc.CallOption) (*GetLevelsResponse, error)
	StartLevel(ctx context.Context, in *StartLevelRequest, opts ...grpc.CallOption) (*StartLevelResponse, error)
	CompleteLevel(ctx context.Context, in *CompleteLevelRequest, opts ...grpc.CallOption) (*CompleteLevelResponse, error)
	GetChallenge(ctx context.Context, in *GetChallengeRequest, opts ...grpc.CallOption) (*Level, error)
	SubmitChallenge(ctx context.Context, in *SubmitChallengeRequest, opts ...grpc.CallOption) (*SubmitChallengeResponse, error)
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error)
	GetAchievements(ctx context.Context, in *GetAchievementsRequest, opts ...grpc.CallOption) (*AchievementsResponse, error)
	CheckLevels(ctx context.Context, in *Cheak, opts ...grpc.CallOption) (*CHeakResult, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) GetLevels(ctx context.Context, in *GetLevelsRequest, opts ...grpc.CallOption) (*GetLevelsResponse, error) {
	out := new(GetLevelsResponse)
	err := c.cc.Invoke(ctx, "/game.GameService/GetLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StartLevel(ctx context.Context, in *StartLevelRequest, opts ...grpc.CallOption) (*StartLevelResponse, error) {
	out := new(StartLevelResponse)
	err := c.cc.Invoke(ctx, "/game.GameService/StartLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CompleteLevel(ctx context.Context, in *CompleteLevelRequest, opts ...grpc.CallOption) (*CompleteLevelResponse, error) {
	out := new(CompleteLevelResponse)
	err := c.cc.Invoke(ctx, "/game.GameService/CompleteLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetChallenge(ctx context.Context, in *GetChallengeRequest, opts ...grpc.CallOption) (*Level, error) {
	out := new(Level)
	err := c.cc.Invoke(ctx, "/game.GameService/GetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) SubmitChallenge(ctx context.Context, in *SubmitChallengeRequest, opts ...grpc.CallOption) (*SubmitChallengeResponse, error) {
	out := new(SubmitChallengeResponse)
	err := c.cc.Invoke(ctx, "/game.GameService/SubmitChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error) {
	out := new(LeaderboardResponse)
	err := c.cc.Invoke(ctx, "/game.GameService/GetLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetAchievements(ctx context.Context, in *GetAchievementsRequest, opts ...grpc.CallOption) (*AchievementsResponse, error) {
	out := new(AchievementsResponse)
	err := c.cc.Invoke(ctx, "/game.GameService/GetAchievements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CheckLevels(ctx context.Context, in *Cheak, opts ...grpc.CallOption) (*CHeakResult, error) {
	out := new(CHeakResult)
	err := c.cc.Invoke(ctx, "/game.GameService/CheckLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	GetLevels(context.Context, *GetLevelsRequest) (*GetLevelsResponse, error)
	StartLevel(context.Context, *StartLevelRequest) (*StartLevelResponse, error)
	CompleteLevel(context.Context, *CompleteLevelRequest) (*CompleteLevelResponse, error)
	GetChallenge(context.Context, *GetChallengeRequest) (*Level, error)
	SubmitChallenge(context.Context, *SubmitChallengeRequest) (*SubmitChallengeResponse, error)
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*LeaderboardResponse, error)
	GetAchievements(context.Context, *GetAchievementsRequest) (*AchievementsResponse, error)
	CheckLevels(context.Context, *Cheak) (*CHeakResult, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) GetLevels(context.Context, *GetLevelsRequest) (*GetLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevels not implemented")
}
func (UnimplementedGameServiceServer) StartLevel(context.Context, *StartLevelRequest) (*StartLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLevel not implemented")
}
func (UnimplementedGameServiceServer) CompleteLevel(context.Context, *CompleteLevelRequest) (*CompleteLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteLevel not implemented")
}
func (UnimplementedGameServiceServer) GetChallenge(context.Context, *GetChallengeRequest) (*Level, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedGameServiceServer) SubmitChallenge(context.Context, *SubmitChallengeRequest) (*SubmitChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitChallenge not implemented")
}
func (UnimplementedGameServiceServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*LeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedGameServiceServer) GetAchievements(context.Context, *GetAchievementsRequest) (*AchievementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievements not implemented")
}
func (UnimplementedGameServiceServer) CheckLevels(context.Context, *Cheak) (*CHeakResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLevels not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_GetLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetLevels(ctx, req.(*GetLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StartLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).StartLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/StartLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).StartLevel(ctx, req.(*StartLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CompleteLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CompleteLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/CompleteLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CompleteLevel(ctx, req.(*CompleteLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetChallenge(ctx, req.(*GetChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_SubmitChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).SubmitChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/SubmitChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).SubmitChallenge(ctx, req.(*SubmitChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetAchievements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetAchievements(ctx, req.(*GetAchievementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CheckLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cheak)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CheckLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/CheckLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CheckLevels(ctx, req.(*Cheak))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLevels",
			Handler:    _GameService_GetLevels_Handler,
		},
		{
			MethodName: "StartLevel",
			Handler:    _GameService_StartLevel_Handler,
		},
		{
			MethodName: "CompleteLevel",
			Handler:    _GameService_CompleteLevel_Handler,
		},
		{
			MethodName: "GetChallenge",
			Handler:    _GameService_GetChallenge_Handler,
		},
		{
			MethodName: "SubmitChallenge",
			Handler:    _GameService_SubmitChallenge_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _GameService_GetLeaderboard_Handler,
		},
		{
			MethodName: "GetAchievements",
			Handler:    _GameService_GetAchievements_Handler,
		},
		{
			MethodName: "CheckLevels",
			Handler:    _GameService_CheckLevels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}
