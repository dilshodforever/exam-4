version: '3.9'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mynetwork

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - mynetwork

  migrate:
    image: migrate/migrate
    networks:
      - mynetwork
    volumes:
      - ./migrations:/migrations
    command: [ "-path", "/migrations", "-database",  
                "postgres://postgres:1234@auth_con:5432/auths?sslmode=disable", 
                "up" ]
    depends_on:
      - postgres-db

  postgres-db:
    container_name: auth_con
    image: postgres:latest
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: auths
    volumes:
      - db:/post-database/post-memory
    ports:
      - "5433:5432"
    networks:
      - mynetwork
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
   
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - mynetwork

    
  mongo-db:
    container_name: mongo
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: dilshod
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27017:27017"
    networks:
      - mynetwork
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mongo --eval 'db.runCommand({ ping: 1 })'"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  mynetwork:
    external: true
    name: global-network
    driver: bridge

volumes:
  db:
  redis-data:
    driver: local
